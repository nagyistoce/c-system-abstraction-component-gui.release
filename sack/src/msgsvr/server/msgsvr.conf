# how do I pass arguments to these services...
# these are auto-loaded then...
# but only one on each side... there'd be a msgsvr_host, and a msgsvr_client
# and a msgsvr_local I suppose where all services are local?

# maybe I need a configuration agent to the msgsvr... which is a reference
# of a service anyhow... a client to the server if you will.

service network_client_display tcp_service.dll display 127.0.0.1:5000

service network_host_display tcp_service.dll display 5000


# these are possible video service providers
# the image service and video service need to be
# matched correctly, otherwise they will not
# function as expected...

# to be implemented - use 'render' interface and use this
# alias to switch between display and video (SDL? optimal framebuffer?)

win32 module displayservice.dll
win32 module video.dll
win32 module image.dll

#allowed pairings of aliases valid for windows

# native win32 api
win32 alias service render video
win32 alias service image real_image

# someday - it might be nice to have a message service 
# interface to these libraries...
#win32 alias service render client_video
#win32 alias service image client_real_image

# uses one display from win32 api and 
# manages all surfaces created within that space
#win32 alias service render display
#win32 alias service image display_image

# uses the message service interface to host
#  the functions appropriately.... 
#win32 alias service render client_display
#win32 alias service image client_display_image


# file based options - encrypted 
win32 service=options_quiet library=futgetpr.dll load=GetQuietInterface unload=DropAnyInterface
win32 service=futgetpr      library=futgetpr.dll load=GetInteractiveInterface unload=DropAnyInterface
win32 service=futgetpr_text library=futgetpr_txt.dll load=GetInteractiveInterface unload=DropAnyInterface

# MySQL options - uses futgetpr to bootstrap connection
# SQL based options - MySQL ODBC preferred (required?)
win32 service=SQLoptions    library=getoption.dll load=GetOptionInterface unload=DropOptionInterface

# select which one to use as default 'options' interface...
win32 alias service options futgetpr

#dialog/widget services...
# hm this is incomplete yet...
#win32 service=controls library=psi.dll load=GetControlInterface unload=DropControlInterface


linux module libdisplayservice.so
alias service msg_service/x_image msg_service/image
alias service msg_service/x_display msg_service/display

# also need the real service for the service
# itself to use?
linux module libimage.so

#linux module libdisplay.so
#linux alias service render display
#linux alias service image  display_image


# these services use msgsvr as the display service coordinator

# these iterfaces are the direct interfaces to the libraries, does not use
# msgsvr to transport
#linux service=real_image library=libimage.so load=GetImageInterface unload= DropImageInterface
#linux service=display_image library=libdisplay.so load=GetImageInterface unload= DropImageInterface
#linux service=display library=libdisplay.so load=GetDisplayInterface unload=DropImageInterface

linux alias service render display
linux alias service image  display_image

#linux alias service render client_display
#linux alias service image  client_display_image

#linux service=futgetpr library=libfutgetpr.so load=GetInteractiveInterface unload=DropInteractiveInterface
#linux service=futgetpr_text library=libfutgetpr_txt.so load=GetInteractiveInterface unload=DropInteractiveInterface
#linux service=SQLoptions library=libgetoption.so load=GetOptionInterface unload=DropOptionInterface
#linux alias service options futgetpr_text

# hm this is incomplete yet...
#linux service=controls library=libpsi.so load=GetInterface unload=DropInterface

