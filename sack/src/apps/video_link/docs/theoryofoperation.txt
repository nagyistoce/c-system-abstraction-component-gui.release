---BEGIN THEORYOFOPERATION.TXT---CUT HERE---Cut Here---cut here

Note:  Many comments contained "within quotes" directly correlate to
source code for easy reference.  For example, just search for "Changes
In Master" in this document and then again in stateserver.c.

GLOSSARY

LIST_FORALL A means of list that uses pointers to data to manipulate
and make decisions..

      PLIST tasks;
      PTASK_INFO task = LaunchProgramEx( ... );

      INDEX idx;

      AddLink( tasks, task );
// something monumental happens.
//then, later on somewhere else in the code, when it's time to decide
if a task exists....

      LIST_FORALL( tasks, idx, PTASK_INFO  , task )  
      {

          printf(...%p is a task", task ); 

          break;

      }

     if( !task )

     {

     return; 

     }

     else

     {

     DeleteTask( task );

     }



***** alpha2server ****

alpha2server monitors and responds to state changes in the
database.  alpha2server is comprised of several source files.

-- statserver.c --
Checks the state of the database and responds appropriately.  Upon
entering main, the hall_name is copied from the first parameter passed
when launching the application, if any.  If none, then in PostLoadInit
one will be found (see PostLoadInit).  The external function
InitBDataService is called (see bdata_state_server.c), and
ServerCheckStateThread is forked from the main process using SACK's
ThreadTo function.  This file's functions are described in detail:

PostLoadInit
The main purpose of this function is to populate the hall list for
later reference and the secondary function is to determine which hall
is the local hall. The database table "location" is queried for the
following fields:id, packed_name, address_bdata, address_video from
within a for-loop.  Each record is copied into a structure whose
pointer is added to the hall list. Program exits gracefully but noisily and
abruptly if the local hall cannot be determined.


InitProc
Minor function that initializes variables as the last step in the
initialization process.  Also, resets everybody's announcement field in
link_hall_state to 'NONE'. Program exits gracefully but noisily and
abruptly if the database cannot be addressed.


KillAllTasks
Executs a LIST_FORALL to kill any tasks contained within the global
task list. An examination of the code should make it clear that
KillAllTasks only kills "video" tasks, or VLC clients.


ScriptCommunicator
Resonsible for forking and launching the script ianson with the correct
parameters to cause a sound to be played, video to be broadcast or
displayed, bdata to be hosted or similar.  The result is a task
pointer, added to the global task list.


TaskEnded
A callback function passed as a parameter when calling LaunchProgram in
ScriptCommunicator.  When the ianson script exits after being launched
from ScriptCommunicator, TaskEnded is called, then the program's
task link is deleted from the global task list.  


ForceLocalMode
Sets internal state bits to zero, updates link_hall_state with zeros in
reset_state,task_launched,master_ready,delegate_ready,and
participating, then calls ScriptCommunicator to command bdata boxes
into local mode.


PollCurrentState 
Queries tables in the MySQL database, including link_state and
link_hall_state.  It is in this function that the key state bits of
internal structures are assigned, to which the rest of the project
makes decisions.  The more important elements of state include
task_launched, enabled, prohibited, participating, reset_state,
master_ready and delegate_ready but not the least of which is
master_hall_id, delegated_master_hall_id, and to a lesser extent
controller_hall_id.

If link_state does not have an entry for the specified bingoday, one is
created with state fields set to zero.  Failure to access database
tables results in the program exiting.


ProcessBdataConfig
Using guards, and under the exact condition that master_ready is set
for the local hall, ScriptCommunicator is called with "bdata_host"
parameter, which in turn and through a series of scripts tells the
BData Controller to socket-connect back to the video server, causing a
chain of events to happen which broadcasts BData to all interested
parties. (see bdata_state_server).


ServerCheckStateThread
This is the main function of this application. Its purpose is to
launch video, audio, or control bdata as identified by state within
the appropriate database tables.  A five second (while) loop is
executed. Every five seconds, PollCurrentState is called, resulting in
the MySQL database being queried for state.  As long as the local
hall is master and there is no delegated_master, ProcessBdataConfig
is called. Some possible outcomes of PollCurrentState are documented
here:

"Eject, EJECT, EJECT!!"
If reset_state is indicated or enabled is false
or prohibited is true, ForceLocalMode is called, effectively returning
the system to a quiescent condition.  

"Announcements?" 
If an announcement is indicated in link_hall_state to
be played, ScriptCommunicator is called to play the sound.

"Am I Master...or Participant?" 
If master_ready, delegate_ready, or participating is set and
task_launched is false (no task active), a decision is made as to what
role the current hall should play.  If master_hall_id equals my
hall_id, ScriptCommunicator is called to broadcast (the role of
master).  Otherwise, if master_hall_id does not equal my hall_id
(master is somebody else), ScriptCommunicator is called to display (the
role of participant).
This condition is predicated on some or all of the three identified
state bits: master_ready, delegate_ready, or participating.  Since
master_ready or delegate_ready is only set when the master has started
broadcasting successfully, the state bit of participating would be set
and someone else would be broadcasting so master/delegate_ready would
be set as well. Then, call ScriptCommunicator to display (the role of
participant).  On the other hand, if I am indicated as a participant
and not coincidentally I am identified in link_state as the
master_hall_id as well, master/delegate_ready would both be false
because I have yet to launch ScriptCommunicator to broadcast but I am
still a participant and master_hall_id equals my hall_id, so launch
ScriptCommunicator to broadcast.

"Changes In Master"
If master_hall_id changes, ForceLocalMode is called to reset the server
into a quiescent condition, ready for the next PollCurrentState to
start all over again.

"Changes In Delegate Master"
When the delegated_master_hall_id changes, KillAllTasks is called to
remove the current video being displayed ready for the next loop
iteration to display the delegate.

"I am the master"
If I am the master, but "master_ready" has not been set, then call
ScriptCommunicator to broadcast.

"Where did everybody go?"
No master_ or delegate_ready and I'm not even participating, but I am
enabled. If this is the case, then call ScriptCommunicator to display
video.



-- statebuttons.c --
The real functions with hooks into the MILK-based
GUI.

-- db.c --
Stipulates database table fields and formats and creates them
if incorrect or missing.  This is done at initialization time as the
function which performs the checks/corrections is contained in a
function with a  PRELOAD prefix.


-- bdata_state_server.c --
Manages socket communication between local video server and all BData
controllers.  Ball Data(BData) is collected by the master's local BData
Controller and passed through a socket connection back to the master's
video server, who then passes the data through socket connections to
all other BData Controllers (who then display the data they've been
passed on their flashboard).  The master's local BData controller is
*told* to start passing data to the master during the initialization
process for being master. (see ianson script for bdata_host parameter)

Regarding the global pointer to a client called pcHost used within
bdata_state_server.c, it is prudent to recognize that pcHost is
initialized to NULL when alpha2server is instantiated because it is in
global namespace.  Additionally, in a quiescent condition in which no
one is master (like after a complete reset), there will be no socket
connections and pcHost will be NULL.  Consequently, no BData traffic
will exist.  Only when someone begins the initialization process to
become master is the ianson script called with "bdata_host" (see
statserver.c) once and only once, which in turn and through a series of
scripts the master hall's BData Controller is *told* to communicate
back to its video server.  At this time, an incoming connection is
assigned to pcHost, therefore making it non-NULL.  Logically and
programmatically, the master then connects to all other halls, making
their pcHosts non-NULL.

Extensive use of l.pHallList ( the hall list ) from stateserver.c
allows easy LIST_FORALLs.


A discussion of functions follows:


InitBdataService
Called at the beginning of stateserver.c's main, this function opens a
listener socket on every IP address at port 6740 and passes
bdata_state_server.c's function ClientConnected as a callback. If
successful, SACK's AddTimer function is invoked with ConnectTimer and
100 msecs as parameters, so every 100 msecs the bdata_state_server.c
function ConnectTimer will called.


ConnectTimer
The main purpose of this function is to manage incoming socket
connections.  Ten times a second, state is compared as long as pcHost
is non-NULL.  It is important to reiterate at this point
that pcHost will only be non-NULL when the port 6740 is
socket-connected and consequently the ClientConnected callback is
invoked.


Comparisons occur:

If pcHost is non-NULL (indicating a connection is present
...from whomever) and one of the three following conditions exist,
the socket is killed by calling RemoveClient and BData no longer is
passed.  The three conditions are: prohibited, not enabled, or
master_hall_id no longer is local hall_id.  

If pcHost is non-NULL (indicating a connection is present...from
whomever) and the state of the local hall is master_ready (indicating
the local hall is the master, which consequently means the connection
identified as pcHost is the connection from the local hall's BData
Controller and no one else),  a LIST_FORALL is entered to which all
other halls' BData Controllers ( except the local hall ) are
socket-connected via OpenTCPClient if that hall is either enabled or
not prohibited.  If that hall is either not enabled or is prohibited,
the TCP connection to that hall is closed.

Data exchange occurs in ServerRecieve.



ClientConnected
A callback called when incoming socket connections occur on port 6740. 
This is, by nature, for incoming traffic, one way, from the *master* to
the local hall, a participant, or if in case the local hall is master,
it is the local hall's BData Controller.. And only one should ever
exist at any given time. If the global pointer to a client called
pcHost is NULL (indicating an unconnected and therefore quiescent
condition), the first connection made is assigned as pcHost. 

This connection is presumed to be one of two entities: the *master*
(whoever that is), who will then be sending BData shortly, or, if the
local hall is master, the local hall's BData Controller. Otherwise, a
LIST_FORALL determines if there are leftover connections and kills them
as it is a failure condition to recieve BData from two sources at once.

Clearly, the existence of a NULL value in pcHost means that BData from
someone is forthcoming, and the existence of a non-NULL value in pcHost
means that BData is being recieved from someone (whoever that is, the
local host's BData Controller if the local host is master, or the
master if the local host is not master).

The ServerComplete function is identified as the read complete
callback, likewise with CientClosed as the close callback.  So, when
data is recieved on the socket, the ServerComplete function is passed
the data.  Similarly, when the socket closes, the ClientClosed function
is called.



ServerRecieve
A simple LIST_FORALL iterates through the hall list and sends data via
the SendTCP command to all halls, one by one.

ClientClosed
A simple LIST_FORALL iterates through the hall list and closes
connections via RemoveClient to all halls, one by one, then sets pcHost
to NULL.  Setting pcHost to NULL indicates no BData is being accepted.






-- announce.c --
Depricated method of launching sound events.


-- ianson script --
Accepts several parameters and launches processes or applications
appropriately . Responsible as the beginning of a chain of scripts
signaling each other to initiate or eliminate action.  Actions include
launching video, issuing commands to the bdata_state_server which
manipulates the bdata controller, etc.  Especially for the broadcast
parameter, for example, the mark_ready2 script is passed the broadcast
parameter, and then VLC is launched.

-- mark_ready2 script --
Accepts one parameter, is called by ianson directly prior to any other
action by ianson.  Responsible for communicate success or failure into
state fields in the database tables link_state and link_hall_state. 


-- blctrl/videoctrl script --	
Accepts one parameter, blctrl is called by ianson as a means to
manipulate the camera multiplexor.  Based on the parameter passed,
blctrl calls the videoctrl script which then outputs via serial port
commands to the multiplexor.





---END THEORYOFOPERATION.TXT---CUT HERE---Cut Here---cut here