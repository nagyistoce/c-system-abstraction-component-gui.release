Tools you will need to compile SACK...

GNU make 3.80+
NASM 0.98.34+

Windows specific tools
OpenWatcom 1.2+ (www.openwatcom.org)
May also build with cygwin if gcc is 3.2+

Linux specific tools
gcc 3.2+

Possible other compilers which may work...
LCC Win32
Digital Mars
Borland free command line tools (bcc55)
Other C99 compiliant compilers?


There are some things that need to be set to compile SACK.

set COMPILER=

this allows several compilers to be used, lately I've been
using lnx (Linux gcc 3.3.x) and wc (open watcom 1.2).  For
a long time I developed with lcc (LCCWin32).  There's also
an option for cyg (cygwin), vc (visual C), started a bit for 
bcc (borland 3.1), b32 (borland 5.5 free commandline tools),
dm (digital mars), ...

= wc, lnx, arm, lcc, bcc, b32?, vc, dm


This absolutely will NOT build with Visual C.

For some compilers which don't support __VA_ARGS__ there is
a c preprocessor to handle processing the code to a .i file
which can then be compiled.  Some compilers have problems
with debug information when doing things this way.

set DEFAULT_DEST=

debug - builds with logging enabled, debug symbols defines _DEBUG
release - builds optimized, stripped, no debug symbols.
static_debug - builds static libraries, and statically linked executables.
static_release - as static_debug and release.

set SACK_BASE=

this is the full path to the project defined with /'s.  Do NOT use
\ when defining SACK_BASE.  (ex: set SACK_BASE=M:/my projects/sack)

These variables on a linux box need to be exported.  They're
fairly static so adding em to your .profile, etc would not be
horrible.


to summarize

set DEFAULT_DEST=debug (99% of the time this is correct)
set COMPILER=wc  (appropriate compiler)
set SACK_BASE=M:/sack (appropriate path...)

if building under Linux, you must also set the environment variable

export __LINUX__=1

there's a lot of test projects here, but it's a core library for
other projects, such as dekware (dekware.sf.net).

